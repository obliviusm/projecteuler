{"ts":1377539683461,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1377539750036,"patch":[[{"diffs":[[1,"arr = [1..10]"]],"start1":0,"start2":0,"length1":0,"length2":13}]],"length":13,"saved":false}
{"ts":1377539754364,"patch":[[{"diffs":[[0," [1..10]"],[1,"\np arr"]],"start1":5,"start2":5,"length1":8,"length2":14}]],"length":19,"saved":false}
{"ts":1377539768535,"patch":[[{"diffs":[[0,"1..10]\np"],[1,"uts"],[0," arr"]],"start1":7,"start2":7,"length1":12,"length2":15}]],"length":22,"saved":false}
{"ts":1377539781749,"patch":[[{"diffs":[[0,"0]\np"],[-1,"uts"],[0," arr"]],"start1":11,"start2":11,"length1":11,"length2":8}]],"length":19,"saved":false}
{"ts":1377539787124,"patch":[[{"diffs":[[0,"0]\np arr"],[1,"[5]"]],"start1":11,"start2":11,"length1":8,"length2":11}]],"length":22,"saved":false}
{"ts":1377539795543,"patch":[[{"diffs":[[0,"arr["],[-1,"5"],[1,"0"],[0,"]"]],"start1":16,"start2":16,"length1":6,"length2":6}]],"length":22,"saved":false}
{"ts":1377539801169,"patch":[[{"diffs":[[0,"]\np arr["],[-1,"0"],[1,"1"],[0,"]"]],"start1":12,"start2":12,"length1":10,"length2":10}]],"length":22,"saved":false}
{"ts":1377540000033,"patch":[[{"diffs":[[0,"r = "],[-1,"["],[1,"Array("],[0,"1..10"],[-1,"]"],[1,") "],[0,"\np arr"],[-1,"[1]"]],"start1":2,"start2":2,"length1":20,"length2":23}]],"length":25,"saved":false}
{"ts":1377540730555,"patch":[[{"diffs":[[-1,"arr = "],[1,"\ndef smallest_evenly_divisible_for numbers\n    \nend\n\n\np smallest_evenly_divisible+for("],[0,"Arra"]],"start1":0,"start2":0,"length1":10,"length2":90},{"diffs":[[0,".10)"],[-1," \np arr"],[1,")"]],"start1":94,"start2":94,"length1":11,"length2":5}]],"length":99,"saved":false}
{"ts":1377541038073,"patch":[[{"diffs":[[0,"ers\n    "],[1,"numbers.make_prime_numbers!"],[0,"\nend\n\n\np"]],"start1":39,"start2":39,"length1":16,"length2":43}]],"length":126,"saved":false}
{"ts":1377541931779,"patch":[[{"diffs":[[0,"ers."],[-1,"make_prime_numbers!"],[1,"each do |x|\n       p self \n    end"],[0,"\nend"]],"start1":51,"start2":51,"length1":27,"length2":42}]],"length":141,"saved":false}
{"ts":1377541942923,"patch":[[{"diffs":[[0,"d\nend\n\n\n"],[-1,"p "],[0,"smallest"]],"start1":88,"start2":88,"length1":18,"length2":16}]],"length":139,"saved":false}
{"ts":1377541952296,"patch":[[{"diffs":[[0,"ible"],[-1,"+"],[1,"_"],[0,"for("]],"start1":117,"start2":117,"length1":9,"length2":9}]],"length":139,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377617030703,"patch":[[{"diffs":[[0,"d\nend\n\n\n"],[1,"#"],[0,"smallest"]],"start1":88,"start2":88,"length1":16,"length2":17},{"diffs":[[0,"(1..10))"],[1,"\np 1*2*3*4*5*6*7*8*9*10"]],"start1":132,"start2":132,"length1":8,"length2":31}]],"length":163,"saved":false}
{"ts":1377617093278,"patch":[[{"diffs":[[0,"2*3*"],[-1,"4"],[1,"(2*2)"],[0,"*5*6*7*"],[-1,"8*9*10"],[1,"(2*2*2)*(3*3)*(2*5)"]],"start1":145,"start2":145,"length1":18,"length2":35}]],"length":180,"saved":false}
{"ts":1377617153745,"patch":[[{"diffs":[[0,")\np "],[-1,"1*2*3*(2*2)*5*6"],[1,"(2*3)"],[0,"*7*("]],"start1":139,"start2":139,"length1":23,"length2":13}]],"length":170,"saved":false}
{"ts":1377617598698,"patch":[[{"diffs":[[0,")\np "],[-1,"(2*3)*"],[0,"7*(2*2"],[-1,"*2"],[0,")*(3"]],"start1":139,"start2":139,"length1":22,"length2":14}]],"length":162,"saved":false}
{"ts":1377617621221,"patch":[[{"diffs":[[0,"3)*(2*5)"],[1,"\np 1*2*3*4*5*6*7*8*9*10"]],"start1":154,"start2":154,"length1":8,"length2":31}]],"length":185,"saved":false}
{"ts":1377618415642,"patch":[[{"diffs":[[0,"mallest_"],[-1,"evenly_divisible_for"],[1,"multiple"],[0," numbers"]],"start1":6,"start2":6,"length1":36,"length2":24},{"diffs":[[0,"    "],[1,"if "],[0,"numbers."],[-1,"each do |x|\n       p self \n    end\nend\n\n\n#smallest_evenly_divisible_for"],[1,"length > 2\n        numbers[]\nend\n\n\n#smallest_multiple"],[0,"(Arr"]],"start1":31,"start2":31,"length1":87,"length2":72}]],"length":158,"saved":false}
{"ts":1377618946970,"patch":[[{"diffs":[[0,"bers\n   "],[1," p numbers\n    numbers ="],[0," if numb"]],"start1":26,"start2":26,"length1":16,"length2":40},{"diffs":[[0,"    "],[1,"smallest_multiple [smallest_multiple(numbers[0,1]), numbers[2..-1]].flatten\n    elseif number.length == 2\n        smallest_multiple2 numbers\n    else\n        numbers\n    end\n    "],[0,"numbers"],[-1,"[]"],[0,"\nend"]],"start1":85,"start2":85,"length1":17,"length2":193}]],"length":358,"saved":false}
{"ts":1377621214701,"patch":[[{"diffs":[[1,"require_relative 'problem3'\n\ndef smallest_multiple2 a, b\n    \nend\n"],[0,"\ndef sma"]],"start1":0,"start2":0,"length1":8,"length2":74},{"diffs":[[0,"ple2 numbers"],[1,"[0], numbers[1]"],[0,"\n    else\n  "]],"start1":283,"start2":283,"length1":24,"length2":39}]],"length":439,"saved":false}
{"ts":1377621276512,"patch":[[{"diffs":[[0,"7*8*9*10"],[1,"\np PrimeFactors.fermat_factor 6535"]],"start1":431,"start2":431,"length1":8,"length2":42}]],"length":473,"saved":false}
{"ts":1377621286650,"patch":[[{"diffs":[[0,"1..10))\n"],[1,"#"],[0,"p 7*(2*2"]],"start1":387,"start2":387,"length1":16,"length2":17},{"diffs":[[0,")*(2*5)\n"],[1,"#"],[0,"p 1*2*3*"]],"start1":410,"start2":410,"length1":16,"length2":17}]],"length":475,"saved":false}
{"ts":1377621302140,"patch":[[{"diffs":[[0,"problem3"],[1,".rb"],[0,"'\n\ndef s"]],"start1":18,"start2":18,"length1":16,"length2":19}]],"length":478,"saved":false}
{"ts":1377621406655,"patch":[[{"diffs":[[0,"0\np "],[-1,"PrimeFactors."],[0,"ferm"]],"start1":443,"start2":443,"length1":21,"length2":8}]],"length":465,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377716853817,"patch":[[{"diffs":[[0,"le2 "],[-1,"a, b\n    \nend\n\ndef smallest_multiple numbers\n    p numbers\n    numbers = if numbers.length > 2\n        smallest_multiple ["],[1,"num1, num2\n    return num1 * num2 if num1 == 1 || num2 == 1\n    \n    num_factors = Hash.new(0)\n    [num1, num2].each do |num|\n        factors = fermat_factor num\n        count_factors = Hash.new(0)\n        factors.each{ |v| count_factors[v] += 1}\n        num_factors[num] = count_factors\n    end\n    #p num_factors\n    \n    common_factors = num_factors[num1].merge(num_factors[num2]) do |key, oldval, newval|\n         oldval > newval ? oldval : newval\n    end\n    #p common_factors\n    \n    multiple = 1\n    common_factors.each do |k,v|\n        multiple *= k ** v\n    end\n    multiple\nend\n\ndef smallest_multiple n\n    p n\n    p n.length\n    \n    if n.length == 2\n        p 2\n        return "],[0,"smal"]],"start1":51,"start2":51,"length1":130,"length2":698},{"diffs":[[0,"iple"],[1,"2"],[0,"(n"],[-1,"umbers[0,1]), numbers[2..-1]].flatten"],[1,"[0], n[1])"],[0,"\n   "]],"start1":758,"start2":758,"length1":47,"length2":21},{"diffs":[[0,"if n"],[-1,"umber"],[0,".length "],[-1,"=="],[1,">"],[0," 2\n "]],"start1":784,"start2":784,"length1":23,"length2":17},{"diffs":[[0,"    "],[1," "],[-1," smallest_multiple2 numbers[0], numbers[1]\n    else\n        numbers"],[1,"p 3\n        return smallest_multiple([smallest_multiple(n[0..1]), n[2..-1]].flatten)\n    else\n        p 1\n        return n"],[0,"\n   "]],"start1":803,"start2":803,"length1":75,"length2":131},{"diffs":[[0,"   n"],[-1,"umbers"],[0,"\nend\n\n\n"],[-1,"#"],[1,"p "],[0,"smal"]],"start1":940,"start2":940,"length1":22,"length2":17},{"diffs":[[0,"(1.."],[-1,"10))"],[1,"3))\n#n = Array(1..10)\n#p n[2..-1] "],[0,"\n#p "]],"start1":976,"start2":976,"length1":12,"length2":42},{"diffs":[[0,"*8*9*10\n"],[1,"#"],[0,"p "],[1,"smallest_multiple2 630, 9\n#p ("],[0,"fermat_f"]],"start1":1054,"start2":1054,"length1":18,"length2":49},{"diffs":[[0,"or 6"],[-1,"535"],[1,"30).inject(:*)"]],"start1":1106,"start2":1106,"length1":7,"length2":18}]],"length":1124,"saved":false}
{"ts":1377717013256,"patch":[[{"diffs":[[0,"\n    els"],[-1,"e"],[0,"if n.len"]],"start1":775,"start2":775,"length1":17,"length2":16}]],"length":1123,"saved":false}
{"ts":1377717050608,"patch":[[{"diffs":[[0,"e n\n"],[-1,"    p n\n    p n.length\n    "],[0,"\n"],[1,""],[0,"    "]],"start1":665,"start2":665,"length1":36,"length2":9},{"diffs":[[0,"= 2\n"],[-1,"        p 2\n"],[0,"    "]],"start1":687,"start2":687,"length1":20,"length2":8},{"diffs":[[0,"> 2\n"],[-1,"        p 3\n"],[0,"    "]],"start1":756,"start2":756,"length1":20,"length2":8},{"diffs":[[0,"latten)\n"],[1,""],[0,"    else"]],"start1":833,"start2":833,"length1":16,"length2":16},{"diffs":[[0,"lse\n"],[-1,"        p 1\n"],[0,"    "]],"start1":846,"start2":846,"length1":20,"length2":8}]],"length":1060,"saved":false}
{"ts":1377717077572,"patch":[[{"diffs":[[0,"(1.."],[-1,"3))\n#n = Array(1..10)\n#p n[2..-1] \n#p 7*(2*2)*(3*3)*(2*5)\n#p 1*2*3*4*5*6*7*8*9*10\n#p smallest_multiple2 630, 9"],[1,"20))"],[0,"\n#p "]],"start1":912,"start2":912,"length1":118,"length2":12}]],"length":954,"saved":false}
{"ts":1377717139140,"patch":[[{"diffs":[[0,"tiple n\n"],[-1,"\n"],[0,"    if n"]],"start1":661,"start2":661,"length1":17,"length2":16},{"diffs":[[0,"th == 2\n        "],[-1,"return "],[0,"smallest_multipl"]],"start1":682,"start2":682,"length1":39,"length2":32},{"diffs":[[0,"        "],[-1,"return "],[0,"smallest"]],"start1":752,"start2":752,"length1":23,"length2":16},{"diffs":[[0,"        "],[-1,"return "],[0,"n\n    en"]],"start1":835,"start2":835,"length1":23,"length2":16},{"diffs":[[0,"    end\n"],[-1,"    n\n"],[0,"end\n\n\np "]],"start1":845,"start2":845,"length1":22,"length2":16}]],"length":926,"saved":false}
{"ts":1377717226897,"patch":[[{"diffs":[[0,"iple"],[1,"2"],[0,"(n[0"],[-1,".."],[1,"], n["],[0,"1]),"]],"start1":792,"start2":792,"length1":14,"length2":18}]],"length":930,"saved":false}
{"ts":1377717297023,"patch":[[{"diffs":[[0,"multiple"],[-1,"("],[1," "],[0,"[smalles"]],"start1":769,"start2":769,"length1":17,"length2":17},{"diffs":[[0,".flatten"],[-1,")"],[0,"\n    els"]],"start1":820,"start2":820,"length1":17,"length2":16}]],"length":929,"saved":false}
{"ts":1377717397016,"patch":[[{"diffs":[[0,"-1]]"],[-1,".flatten"],[0,"\n   "]],"start1":816,"start2":816,"length1":16,"length2":8}]],"length":921,"saved":false}
{"ts":1377717407605,"patch":[[{"diffs":[[0,"[2..-1]]"],[1,".flatten"],[0,"\n    els"]],"start1":812,"start2":812,"length1":16,"length2":24}]],"length":929,"saved":false}
